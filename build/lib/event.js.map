{"version":3,"sources":["../../src/lib/event.js"],"names":["db","require","main","plugins","posts","p","promisify","sortedSetAdd","sortedSetRemove","getSortedSetRangeByScore","getSortedSetRange","setObject","getObject","getObjects","deleteKey","delete","exists","fireHook","getCidsByPids","getCidByPid","listKey","listByEndKey","saveEvent","event","objectKey","pid","endDate","repeats","all","startDate","deleteEvent","data","post","getEventsByDate","Infinity","byStart","byEnd","keys","filter","includes","x","events","cids","map","i","cid","parseInt","JSON","parse","mandatory","allday","getAllEvents","getEvent","getEventsEndingAfter","eventExists","escapeEvent","location","description"],"mappings":"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","file":"event.js","sourcesContent":["import Promise from 'bluebird';\r\nimport { removeAll as removeAllResponses } from './responses';\r\n\r\nconst db = require.main.require('./src/database');\r\nconst plugins = require.main.require('./src/plugins');\r\nconst posts = require.main.require('./src/posts');\r\n\r\nconst p = Promise.promisify;\r\n\r\nconst sortedSetAdd = p(db.sortedSetAdd);\r\nconst sortedSetRemove = p(db.sortedSetRemove);\r\nconst getSortedSetRangeByScore = p(db.getSortedSetRangeByScore);\r\nconst getSortedSetRange = p(db.getSortedSetRange);\r\n// const getObjectsFields = p(db.getObjectsFields);\r\nconst setObject = p(db.setObject);\r\nconst getObject = p(db.getObject);\r\nconst getObjects = p(db.getObjects);\r\nconst deleteKey = p(db.delete);\r\nconst exists = p(db.exists);\r\nconst fireHook = p(plugins.fireHook);\r\nconst getCidsByPids = p(posts.getCidsByPids);\r\nconst getCidByPid = p(posts.getCidByPid);\r\n\r\nconst listKey = 'plugins:calendar:events';\r\nconst listByEndKey = `${listKey}:byEnd`;\r\n\r\nconst saveEvent = (event) => {\r\n  const objectKey = `${listKey}:pid:${event.pid}`;\r\n  const endDate = event.repeats ? event.repeats.endDate || 9999999999999 : event.endDate;\r\n  return Promise.all([\r\n    sortedSetAdd(listKey, event.startDate, objectKey),\r\n    sortedSetAdd(listByEndKey, endDate, objectKey),\r\n    setObject(objectKey, event),\r\n  ]);\r\n};\r\n\r\nconst deleteEvent = (data) => {\r\n  const objectKey = `${listKey}:pid:${data.post.pid}`;\r\n  return Promise.all([\r\n    sortedSetRemove(listKey, objectKey),\r\n    sortedSetRemove(listByEndKey, objectKey),\r\n    deleteKey(objectKey),\r\n    removeAllResponses(data.post.pid),\r\n  ]);\r\n};\r\n\r\nconst getEventsByDate = async (startDate, endDate) => {\r\n  // may be possible eventually\r\n  // except I need to do the intersection, not the union, of the sets\r\n  // and I want events whose start date could be before the month starts\r\n  // and whose end date could be after the month ends\r\n\r\n  // const keys = await getSortedSetRangeByScore([\r\n  //   listKey,\r\n  //   listByEndKey,\r\n  // ], 0, -1, startDate, endDate);\r\n\r\n  // for now we have to do this,\r\n  // and hope it isn't too hard on memory\r\n  const [byStart, byEnd] = await Promise.all([\r\n    // events that start before end date\r\n    getSortedSetRangeByScore(listKey, 0, -1, 0, endDate),\r\n    // events that end after start date\r\n    getSortedSetRangeByScore(listByEndKey, 0, -1, startDate, +Infinity),\r\n  ]);\r\n  // filter to events that only start before the endDate and end after the startDate\r\n  const keys = byStart.filter(x => byEnd.includes(x));\r\n\r\n  const events = await getObjects(keys);\r\n\r\n  const cids = await getCidsByPids(events.map(event => event.pid));\r\n\r\n  return events.map((event, i) => ({\r\n    ...event,\r\n    cid: cids[i],\r\n    startDate: parseInt(event.startDate, 10),\r\n    endDate: parseInt(event.endDate, 10),\r\n    repeats: (typeof event.repeats === 'string') ? JSON.parse(event.repeats) : event.repeats,\r\n    mandatory: event.mandatory === true || event.mandatory === 'true',\r\n    allday: event.allday === true || event.allday === 'true',\r\n  }));\r\n};\r\n\r\nconst getAllEvents = async () => {\r\n  const keys = await getSortedSetRange(listKey, 0, -1);\r\n  const events = await getObjects(keys);\r\n\r\n  return events;\r\n};\r\n\r\nconst getEvent = async (pid) => {\r\n  const event = await getObject(`${listKey}:pid:${pid}`);\r\n  const cid = await getCidByPid(event.pid);\r\n\r\n  return {\r\n    ...event,\r\n    cid,\r\n  };\r\n};\r\n\r\nconst getEventsEndingAfter = async (endDate) => {\r\n  const keys = await getSortedSetRangeByScore(listByEndKey, 0, -1, endDate, +Infinity);\r\n  const events = await getObjects(keys);\r\n\r\n  return events;\r\n};\r\n\r\nconst eventExists = pid => exists(`${listKey}:pid:${pid}`);\r\n\r\nconst escapeEvent = async (event) => {\r\n  const [location, description] = await Promise.all([\r\n    fireHook('filter:parse.raw', event.location || ''),\r\n    fireHook('filter:parse.raw', event.description || ''),\r\n  ]);\r\n\r\n  return {\r\n    ...event,\r\n    location,\r\n    description,\r\n  };\r\n};\r\n\r\nexport {\r\n  deleteEvent,\r\n  saveEvent,\r\n  eventExists,\r\n  getEvent,\r\n  getEventsByDate,\r\n  escapeEvent,\r\n  getAllEvents,\r\n  listKey,\r\n  listByEndKey,\r\n  getEventsEndingAfter,\r\n};\r\n"]}