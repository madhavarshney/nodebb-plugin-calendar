{"version":3,"sources":["../../../src/lib/tests/formatDates.js"],"names":["lang","s","e","start","Date","st","date","toLocaleDateString","hours","getHours","mins","getMinutes","ampm","toLocaleTimeString","replace","end","en","minutes","forEach","x"],"mappings":"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","file":"formatDates.js","sourcesContent":["import assert from 'assert';\r\nimport { formatDates } from '../translatorModule';\r\n\r\nconst lang = 'en-us';\r\n\r\n[\r\n  // same day, same time, not allday\r\n  () => {\r\n    const s = 1465186294775;\r\n    const e = s + (1000 * 60 * 43) + (1000 * 60 * 60 * 2); // offset 2 hours 43 min\r\n\r\n    const start = new Date(s);\r\n\r\n    const st = {\r\n      date: start.toLocaleDateString(lang),\r\n      hours: start.getHours(),\r\n      mins: start.getMinutes(),\r\n      ampm: start.toLocaleTimeString(lang).replace(/[^APM]/g, ''),\r\n    };\r\n\r\n    assert(`${st.date}<br>${st.hours}:${st.mins} ${st.ampm}`, formatDates(s, e, false, lang));\r\n  },\r\n  // same day, time separation, not allday\r\n  () => {\r\n    const s = 1465186294775;\r\n    const e = s + (1000 * 60 * 43) + (1000 * 60 * 60 * 2); // offset 2 hours 43 min\r\n\r\n    const start = new Date(s);\r\n    const end = new Date(e);\r\n\r\n    const st = {\r\n      date: start.toLocaleDateString(lang),\r\n      hours: start.getHours(),\r\n      mins: start.getMinutes(),\r\n      ampm: start.toLocaleTimeString(lang).replace(/[^APM]/g, ''),\r\n    };\r\n\r\n    const en = {\r\n      hours: end.getHours(),\r\n      mins: end.getMinutes(),\r\n      ampm: end.toLocaleTimeString(lang).replace(/[^APM]/g, ''),\r\n    };\r\n\r\n    assert(`${st.date}<br>${st.hours}:${st.mins} ${st.ampm} - ` +\r\n      `${en.hours}:${en.minutes} ${en.ampm}`, formatDates(s, e, false, lang));\r\n  },\r\n  // same day, time separation, allday\r\n  () => {\r\n    const s = 1465186294775;\r\n    const e = s + (1000 * 60 * 43) + (1000 * 60 * 60 * 2); // offset 2 hours 43 min\r\n\r\n    const start = new Date(s);\r\n\r\n    assert(`${start.toLocaleDateString(lang)}`, formatDates(s, e, true, lang));\r\n  },\r\n  // different day, not allday\r\n  () => {\r\n    const s = 1465186294775;\r\n    const e = s +\r\n      (1000 * 60 * 60 * 24) +\r\n      (1000 * 60 * 60 * 2) +\r\n      (1000 * 60 * 43); // offset 1 day 2 hours 43 min\r\n\r\n    const start = new Date(s);\r\n    const end = new Date(e);\r\n\r\n    const st = {\r\n      date: start.toLocaleDateString(lang),\r\n      hours: start.getHours(),\r\n      mins: start.getMinutes(),\r\n      ampm: start.toLocaleTimeString(lang).replace(/[^APM]/g, ''),\r\n    };\r\n\r\n    const en = {\r\n      date: end.toLocaleDateString(lang),\r\n      hours: end.getHours(),\r\n      mins: end.getMinutes(),\r\n      ampm: end.toLocaleTimeString(lang).replace(/[^APM]/g, ''),\r\n    };\r\n\r\n    assert(`${st.date} ${st.hours}:${st.mins} ${st.ampm} - ` +\r\n      `${en.date} ${en.hours}:${en.minutes} ${en.ampm}`, formatDates(s, e, false, lang));\r\n  },\r\n  // different day, time separation, allday\r\n  () => {\r\n    const s = 1465186294775;\r\n    const e = s +\r\n      (1000 * 60 * 60 * 24) +\r\n      (1000 * 60 * 60 * 2) +\r\n      (1000 * 60 * 43); // offset 1 day 2 hours 43 min\r\n\r\n    const start = new Date(s);\r\n    const end = new Date(e);\r\n\r\n    assert(`${start.toLocaleDateString(lang)} - ${end.toLocaleDateString(lang)}`,\r\n      formatDates(s, e, true, lang));\r\n  },\r\n].forEach(x => x());\r\n"]}