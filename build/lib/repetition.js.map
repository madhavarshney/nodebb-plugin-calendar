{"version":3,"sources":["../../src/lib/repetition.js"],"names":["dayMS","getOccurencesOfRepetition","event","start","end","startDate","Date","endDate","repeats","every","day","numOfDays","week","daysOfWeek","getDay","month","daysOfMonth","getDate","duration","dates","Array","prototype","concat","apply","map","num","current","valueOf","s","setFullYear","getFullYear","setMonth","getMonth","setDate","mod","out","push","add","date","year","occurences","utc","format"],"mappings":"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","file":"repetition.js","sourcesContent":["// define the schema for repeating events\r\n/*\r\n  event.repeats = null; // single instance event\r\n  event.repeats = {\r\n    every: {\r\n      // repeats every A days and every B days from first instance\r\n      numOfDays: [A, B, ...],\r\n      // repeats every Ath and Bth day of the week\r\n      daysOfWeek: [A, B, ...],\r\n      // repeats every Ath and Bth day of the month\r\n      daysOfMonth: [A, B, ...],\r\n      // repeats every day at startDate.time\r\n      // aliased to { numOfDays = [1] }\r\n      day: true,\r\n      // repeats every week on startDate.dayOfWeek\r\n      // aliased to { daysOfWeek = [startDate.dayOfWeek] }\r\n      // equal to { numOfDays = [7] }\r\n      week: true,\r\n      // repeats every month on startDate.dayOfMonth\r\n      // aliased to { daysOfMonth = [startDate.dayOfMonth] }\r\n      month: true,\r\n      // repeats every year on startDate.dayOfMonth of startDate.month\r\n      year: true,\r\n    },\r\n    endDate, // cut-off date for event occurences\r\n  };\r\n  event.startDate; // first occurrence of event on which repetition is based\r\n  event.endDate; // end of the first occurrence\r\n*/\r\n\r\nimport moment from 'moment';\r\n\r\nconst dayMS = 24 * 60 * 60 * 1000;\r\n\r\n// get occurences of `event` over the interval from `start` to `end`\r\nconst getOccurencesOfRepetition = (event, start, end) => {\r\n  const startDate = new Date(event.startDate);\r\n  const endDate = event.repeats.endDate;\r\n  const every = event.repeats.every;\r\n  if (every.day) {\r\n    every.numOfDays = [1];\r\n  } else if (every.week) {\r\n    every.daysOfWeek = [startDate.getDay()];\r\n  } else if (every.month) {\r\n    every.daysOfMonth = [startDate.getDate()];\r\n  }\r\n\r\n  const duration = event.endDate - event.startDate;\r\n  let dates = [];\r\n  if (every.numOfDays) {\r\n    dates = Array.prototype.concat.apply([], every.numOfDays.map((num) => {\r\n      // first occurrence after start\r\n      const current = new Date(startDate.valueOf());\r\n      if (current < start) {\r\n        const s = new Date(start);\r\n        current.setFullYear(s.getFullYear());\r\n        current.setMonth(s.getMonth());\r\n        current.setDate(s.getDate());\r\n\r\n        if (current < start) {\r\n          current.setDate(current.getDate() + 1);\r\n        }\r\n        const mod = ((current - startDate) % num) * dayMS;\r\n        if (mod !== 0) {\r\n          current.setDate(((current.getDate() + num) - mod) / dayMS);\r\n        }\r\n      }\r\n\r\n      const out = [];\r\n      while (current < end && (!endDate || current < endDate)) {\r\n        out.push(current.valueOf());\r\n        current.setDate(current.getDate() + num);\r\n      }\r\n      return out;\r\n    }));\r\n  } else if (every.daysOfWeek) {\r\n    dates = Array.prototype.concat.apply([], every.daysOfWeek.map((day) => {\r\n      // first occurrence after start\r\n      const current = new Date(startDate.valueOf());\r\n      if (current < start) {\r\n        const s = new Date(start);\r\n        current.setFullYear(s.getFullYear());\r\n        current.setMonth(s.getMonth());\r\n        current.setDate(s.getDate());\r\n\r\n        if (current < start) {\r\n          current.setDate(current.getDate() + 1);\r\n        }\r\n      }\r\n      if (current.getDay() !== day) {\r\n        let add = day - current.getDay();\r\n        if (add < 0) {\r\n          add += 7;\r\n        }\r\n        current.setDate(current.getDate() + add);\r\n      }\r\n\r\n      const out = [];\r\n      while (current < end && (!endDate || current < endDate)) {\r\n        out.push(current.valueOf());\r\n        current.setDate(current.getDate() + 7);\r\n      }\r\n      return out;\r\n    }));\r\n  } else if (every.daysOfMonth) {\r\n    dates = Array.prototype.concat.apply([], every.daysOfMonth.map((date) => {\r\n      // first occurrence after start\r\n      const current = new Date(startDate.valueOf());\r\n      if (current < start) {\r\n        const s = new Date(start);\r\n        current.setFullYear(s.getFullYear());\r\n        current.setMonth(s.getMonth());\r\n\r\n        if (current < start) {\r\n          current.setMonth(current.getMonth() + 1);\r\n        }\r\n      }\r\n      current.setDate(date);\r\n\r\n      const out = [];\r\n      while (current < end && (!endDate || current < endDate)) {\r\n        out.push(current.valueOf());\r\n        current.setMonth(current.getMonth() + 1);\r\n      }\r\n      return out;\r\n    }));\r\n  } else if (every.year) {\r\n    // first occurrence after start\r\n    const current = new Date(startDate.valueOf());\r\n    if (current < start) {\r\n      const s = new Date(start);\r\n      current.setFullYear(s.getFullYear());\r\n\r\n      if (current < start) {\r\n        current.setFullYear(current.getFullYear() + 1);\r\n      }\r\n    }\r\n\r\n    const out = [];\r\n    while (current < end && (!endDate || current < endDate)) {\r\n      out.push(current.valueOf());\r\n      current.setFullYear(current.getFullYear() + 1);\r\n    }\r\n    dates = out;\r\n  }\r\n\r\n  const occurences = dates.map(date => ({\r\n    ...event,\r\n    startDate: date,\r\n    endDate: date + duration,\r\n    day: moment.utc(date).format('YYYY-MM-DD'),\r\n  }));\r\n  return occurences;\r\n};\r\n\r\nexport { getOccurencesOfRepetition };\r\n"]}