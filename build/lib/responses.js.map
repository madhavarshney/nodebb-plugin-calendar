{"version":3,"sources":["../../src/lib/responses.js"],"names":["db","require","main","user","p","promisify","setAdd","setsRemove","deleteAll","getSetsMembers","isSetMember","getUsersFields","values","submitResponse","pid","uid","value","day","includes","Error","toAddKey","toRemoveKeys","filter","val","map","all","removeAll","lists","old","getAll","selection","keys","responseUids","userFields","uids","yes","maybe","no","getUserResponse","arr","key","findIndex"],"mappings":";;;;;;;;;;;;;;;;;;;AACA;;AACA;;;;AAEA,MAAMA,KAAKC,QAAQC,IAAR,CAAaD,OAAb,CAAqB,gBAArB,CAAX;AACA,MAAME,OAAOF,QAAQC,IAAR,CAAaD,OAAb,CAAqB,YAArB,CAAb;;AAEA,MAAMG,IAAI,mBAAQC,SAAlB;;AAEA,MAAMC,SAASF,EAAEJ,GAAGM,MAAL,CAAf;AACA,MAAMC,aAAaH,EAAEJ,GAAGO,UAAL,CAAnB;AACA,MAAMC,YAAYJ,EAAEJ,GAAGQ,SAAL,CAAlB;AACA,MAAMC,iBAAiBL,EAAEJ,GAAGS,cAAL,CAAvB;AACA,MAAMC,cAAcN,EAAEJ,GAAGU,WAAL,CAApB;AACA,MAAMC,iBAAiBP,EAAED,KAAKQ,cAAP,CAAvB;;AAEA,MAAMC,SAAS,CAAC,KAAD,EAAQ,OAAR,EAAiB,IAAjB,CAAf;;AAEA,MAAMC;AAAA,sCAAiB,kBAAoC;AAAA,QAA3BC,GAA2B,SAA3BA,GAA2B;AAAA,QAAtBC,GAAsB,SAAtBA,GAAsB;AAAA,QAAjBC,KAAiB,SAAjBA,KAAiB;AAAA,QAAVC,GAAU,SAAVA,GAAU;;AACzD,QAAI,CAACL,OAAOM,QAAP,CAAgBF,KAAhB,CAAL,EAA6B;AAC3B,YAAMG,MAAM,wBAAN,CAAN;AACD;AACD,QAAI,CAACJ,GAAD,IAAQ,EAAC,MAAM,4BAAWD,GAAX,EAAgBC,GAAhB,CAAP,CAAZ,EAAyC;AACvC,YAAMI,MAAM,yBAAN,CAAN;AACD;;AAED,QAAIC,QAAJ;AACA,QAAIC,YAAJ;AACA,QAAIJ,GAAJ,EAAS;AACPG,iBAAY,GAAD,cAAW,QAAON,GAAI,kBAAiBG,GAAI,IAAGD,KAAM,EAA/D;AACAK,qBAAeT,OACZU,MADY,CACL;AAAA,eAAOC,QAAQP,KAAf;AAAA,OADK,EAEZQ,GAFY,CAER;AAAA,eAAQ,GAAD,cAAW,QAAOV,GAAI,kBAAiBG,GAAI,IAAGM,GAAI,EAAzD;AAAA,OAFQ,CAAf;AAGD,KALD,MAKO;AACLH,iBAAY,GAAD,cAAW,QAAON,GAAI,cAAaE,KAAM,EAApD;AACAK,qBAAeT,OACZU,MADY,CACL;AAAA,eAAOC,QAAQP,KAAf;AAAA,OADK,EAEZQ,GAFY,CAER;AAAA,eAAQ,GAAD,cAAW,QAAOV,GAAI,cAAaS,GAAI,EAA9C;AAAA,OAFQ,CAAf;AAGD;;AAED,UAAM,mBAAQE,GAAR,CAAY,CAChBlB,WAAWc,YAAX,EAAyBN,GAAzB,CADgB,EAEhBT,OAAOc,QAAP,EAAiBL,GAAjB,CAFgB,EAGhBT,OAAQ,GAAD,cAAW,QAAOQ,GAAI,kBAA7B,EAAgDM,QAAhD,CAHgB,CAAZ,CAAN;AAKD,GA3BK;;AAAA;AAAA;AAAA;AAAA,IAAN;;AA6BA,MAAMM;AAAA,uCAAY,WAAOZ,GAAP,EAAe;AAC/B,UAAMa,QAAQ,MAAMlB,eAAgB,GAAD,cAAW,QAAOK,GAAI,kBAArC,CAApB;AACA,UAAMc,MAAMhB,OACTY,GADS,CACL;AAAA,aAAQ,GAAD,cAAW,QAAOV,GAAI,cAAaS,GAAI,EAA9C;AAAA,KADK,CAAZ;AAEA,UAAMf,WAAY,GAAD,cAAW,QAAOM,GAAI,kBAAjC,0CAAuDa,KAAvD,oCAAiEC,GAAjE,GAAN;AACD,GALK;;AAAA;AAAA;AAAA;AAAA,IAAN;;AAOA,MAAMC;AAAA,uCAAS,aAA0D;AAAA,oFAAP,EAAO;;AAAA,QAAjDf,GAAiD,SAAjDA,GAAiD;AAAA,0BAA5CC,GAA4C;AAAA,QAA5CA,GAA4C,6BAAtC,CAAsC;AAAA,gCAAnCe,SAAmC;AAAA,QAAnCA,SAAmC,mCAAvBlB,MAAuB;AAAA,QAAfK,GAAe,SAAfA,GAAe;;AACvE,QAAI,EAAC,MAAM,6BAAYH,GAAZ,EAAiBC,GAAjB,CAAP,CAAJ,EAAkC;AAChC,YAAMI,MAAM,yBAAN,CAAN;AACD;;AAED,QAAIY,IAAJ;AACA,QAAId,GAAJ,EAAS;AACPc,aAAOD,UACJN,GADI,CACA;AAAA,eAAQ,GAAD,cAAW,QAAOV,GAAI,kBAAiBG,GAAI,IAAGM,GAAI,EAAzD;AAAA,OADA,CAAP;AAED,KAHD,MAGO;AACLQ,aAAOD,UACJN,GADI,CACA;AAAA,eAAQ,GAAD,cAAW,QAAOV,GAAI,cAAaS,GAAI,EAA9C;AAAA,OADA,CAAP;AAED;;AAED,UAAMS,eAAe,MAAMvB,eAAesB,IAAf,CAA3B;AACA,UAAME,aAAa,CAAC,UAAD,EAAa,SAAb,EAAwB,UAAxB,EAAoC,cAApC,EAAoD,WAApD,CAAnB;;AAfuE,gBAiB9C,MAAM,mBAAQR,GAAR,CAAYO,aACxCR,GADwC,CACpC;AAAA,aAAQb,eAAeuB,IAAf,EAAqBD,UAArB,CAAR;AAAA,KADoC,CAAZ,CAjBwC;AAAA;;AAAA,UAiBhEE,GAjBgE;AAAA,UAiB3DC,KAjB2D;AAAA,UAiBpDC,EAjBoD;;;AAoBvE,WAAO;AACLF,cADK;AAELC,kBAFK;AAGLC;AAHK,KAAP;AAKD,GAzBK;;AAAA;AAAA;AAAA;AAAA,IAAN;;AA2BA,MAAMC;AAAA,uCAAkB,kBAA6B;AAAA,QAApBxB,GAAoB,SAApBA,GAAoB;AAAA,QAAfC,GAAe,SAAfA,GAAe;AAAA,QAAVE,GAAU,SAAVA,GAAU;;AACnD,QAAI,CAACF,GAAD,IAAQ,EAAC,MAAM,4BAAWD,GAAX,EAAgBC,GAAhB,CAAP,CAAZ,EAAyC;AACvC,YAAMI,MAAM,yBAAN,CAAN;AACD;;AAED,QAAIY,IAAJ;AACA,QAAId,GAAJ,EAAS;AACPc,aAAOnB,OACJY,GADI,CACA;AAAA,eAAQ,GAAD,cAAW,QAAOV,GAAI,kBAAiBG,GAAI,IAAGM,GAAI,EAAzD;AAAA,OADA,CAAP;AAED,KAHD,MAGO;AACLQ,aAAOnB,OACJY,GADI,CACA;AAAA,eAAQ,GAAD,cAAW,QAAOV,GAAI,cAAaS,GAAI,EAA9C;AAAA,OADA,CAAP;AAED;;AAED,UAAMgB,MAAM,MAAM,mBAAQd,GAAR,CAAYM,KAAKP,GAAL,CAAS;AAAA,aAAOd,YAAY8B,GAAZ,EAAiBzB,GAAjB,CAAP;AAAA,KAAT,CAAZ,CAAlB;AACA,WAAOH,OAAO2B,IAAIE,SAAJ,CAAc;AAAA,aAAO,CAAC,CAAClB,GAAT;AAAA,KAAd,CAAP,CAAP;AACD,GAhBK;;AAAA;AAAA;AAAA;AAAA,IAAN;;QAkBSV,c,GAAAA,c;QAAgBa,S,GAAAA,S;QAAWG,M,GAAAA,M;QAAQS,e,GAAAA,e","file":"responses.js","sourcesContent":["import Promise from 'bluebird';\r\nimport { canRespond, canViewPost } from './privileges';\r\nimport { listKey } from './event';\r\n\r\nconst db = require.main.require('./src/database');\r\nconst user = require.main.require('./src/user');\r\n\r\nconst p = Promise.promisify;\r\n\r\nconst setAdd = p(db.setAdd);\r\nconst setsRemove = p(db.setsRemove);\r\nconst deleteAll = p(db.deleteAll);\r\nconst getSetsMembers = p(db.getSetsMembers);\r\nconst isSetMember = p(db.isSetMember);\r\nconst getUsersFields = p(user.getUsersFields);\r\n\r\nconst values = ['yes', 'maybe', 'no'];\r\n\r\nconst submitResponse = async ({ pid, uid, value, day }) => {\r\n  if (!values.includes(value)) {\r\n    throw Error('[[error:invalid-data]]');\r\n  }\r\n  if (!uid || !await canRespond(pid, uid)) {\r\n    throw Error('[[error:no-privileges]]');\r\n  }\r\n\r\n  let toAddKey;\r\n  let toRemoveKeys;\r\n  if (day) {\r\n    toAddKey = `${listKey}:pid:${pid}:responses:day:${day}:${value}`;\r\n    toRemoveKeys = values\r\n      .filter(val => val !== value)\r\n      .map(val => `${listKey}:pid:${pid}:responses:day:${day}:${val}`);\r\n  } else {\r\n    toAddKey = `${listKey}:pid:${pid}:responses:${value}`;\r\n    toRemoveKeys = values\r\n      .filter(val => val !== value)\r\n      .map(val => `${listKey}:pid:${pid}:responses:${val}`);\r\n  }\r\n\r\n  await Promise.all([\r\n    setsRemove(toRemoveKeys, uid),\r\n    setAdd(toAddKey, uid),\r\n    setAdd(`${listKey}:pid:${pid}:responses:lists`, toAddKey),\r\n  ]);\r\n};\r\n\r\nconst removeAll = async (pid) => {\r\n  const lists = await getSetsMembers(`${listKey}:pid:${pid}:responses:lists`);\r\n  const old = values\r\n    .map(val => `${listKey}:pid:${pid}:responses:${val}`);\r\n  await deleteAll([`${listKey}:pid:${pid}:responses:lists`, ...lists, ...old]);\r\n};\r\n\r\nconst getAll = async ({ pid, uid = 0, selection = values, day } = {}) => {\r\n  if (!await canViewPost(pid, uid)) {\r\n    throw Error('[[error:no-privileges]]');\r\n  }\r\n\r\n  let keys;\r\n  if (day) {\r\n    keys = selection\r\n      .map(val => `${listKey}:pid:${pid}:responses:day:${day}:${val}`);\r\n  } else {\r\n    keys = selection\r\n      .map(val => `${listKey}:pid:${pid}:responses:${val}`);\r\n  }\r\n\r\n  const responseUids = await getSetsMembers(keys);\r\n  const userFields = ['userslug', 'picture', 'username', 'icon:bgColor', 'icon:text'];\r\n\r\n  const [yes, maybe, no] = await Promise.all(responseUids\r\n    .map(uids => getUsersFields(uids, userFields)));\r\n\r\n  return {\r\n    yes,\r\n    maybe,\r\n    no,\r\n  };\r\n};\r\n\r\nconst getUserResponse = async ({ pid, uid, day }) => {\r\n  if (!uid || !await canRespond(pid, uid)) {\r\n    throw Error('[[error:no-privileges]]');\r\n  }\r\n\r\n  let keys;\r\n  if (day) {\r\n    keys = values\r\n      .map(val => `${listKey}:pid:${pid}:responses:day:${day}:${val}`);\r\n  } else {\r\n    keys = values\r\n      .map(val => `${listKey}:pid:${pid}:responses:${val}`);\r\n  }\r\n\r\n  const arr = await Promise.all(keys.map(key => isSetMember(key, uid)));\r\n  return values[arr.findIndex(val => !!val)];\r\n};\r\n\r\nexport { submitResponse, removeAll, getAll, getUserResponse };\r\n"]}