{"version":3,"sources":["../../src/lib/validateEvent.js"],"names":["isArrayOf","arr","type","Array","isArray","every","x","checkDate","val","Number","isFinite","Date","getTime","fields","name","length","allday","startDate","endDate","reminders","mandatory","location","includes","description","repeats","Object","keys","validateEvent","event","failures","forEach","key","push","filter","i","indexOf"],"mappings":";;;;;AAAA,MAAMA,YAAY,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC/B,MAAI,CAACC,MAAMC,OAAN,CAAcH,GAAd,CAAL,EAAyB;AACvB,WAAO,KAAP;AACD;AACD,SAAOA,IAAII,KAAJ,CAAUC,KAAK,OAAOA,CAAP,KAAaJ,IAA5B,CAAP,CAJ+B,CAIW;AAC3C,CALD;;AAOA,MAAMK,YAAYC,OAAOC,OAAOC,QAAP,CAAgBF,GAAhB,KAAwB,IAAIG,IAAJ,CAASH,GAAT,EAAcI,OAAd,OAA4BJ,GAA7E;;AAEA,MAAMK,SAAS;AACbC,QAAMN,OAAO,OAAOA,GAAP,KAAe,QAAf,IAA4BA,IAAIO,MAAJ,GAAa,CADzC;AAEbC,UAAQR,OAAO,OAAOA,GAAP,KAAe,SAFjB;AAGbS,aAAWV,SAHE;AAIbW,WAASX,SAJI;AAKbY,aAAWX,OAAOR,UAAUQ,GAAV,EAAe,QAAf,CALL;AAMbY,aAAWZ,OAAO,OAAOA,GAAP,KAAe,SANpB;AAOba,YAAUb,OAAO,OAAOA,GAAP,KAAe,QAAf,IAA2B,CAACA,IAAIc,QAAJ,CAAa,IAAb,CAPhC;AAQbC,eAAaf,OAAO,OAAOA,GAAP,KAAe,QARtB;AASbgB,WAAShB,OAAOA,OAAO,IAAP,IAAgBA,OAAOiB,OAAOC,IAAP,CAAYlB,IAAIH,KAAhB,EAAuBU;AATjD,CAAf;;AAYA,MAAMY,gBAAiBC,KAAD,IAAW;AAC/B,MAAIC,WAAW,EAAf;;AAEAJ,SAAOC,IAAP,CAAYb,MAAZ,EAAoBiB,OAApB,CAA6BC,GAAD,IAAS;AACnC,QAAI,CAAClB,OAAOkB,GAAP,EAAYH,MAAMG,GAAN,CAAZ,CAAL,EAA8B;AAC5BF,eAASG,IAAT,CAAcD,GAAd;AACD;AACF,GAJD;AAKA,MAAIH,MAAMX,SAAN,GAAkBW,MAAMV,OAA5B,EAAqC;AACnCW,aAASG,IAAT,CAAc,WAAd,EAA2B,SAA3B;AACD;AACD,MAAIJ,MAAMJ,OAAN,IACFf,OAAOC,QAAP,CAAgBkB,MAAMJ,OAAN,CAAcN,OAA9B,CADE,IAEFU,MAAMJ,OAAN,CAAcN,OAAd,GAAwBU,MAAMX,SAFhC,EAE2C;AACzCY,aAASG,IAAT,CAAc,eAAd;AACD;;AAED;AACAH,aAAWA,SAASI,MAAT,CAAgB,CAAC3B,CAAD,EAAI4B,CAAJ,KAAUL,SAASM,OAAT,CAAiB7B,CAAjB,MAAwB4B,CAAlD,CAAX;;AAEA,SAAO,CAAC,CAAC,CAACL,SAASd,MAAZ,EAAoBc,QAApB,CAAP;AACD,CArBD;;kBAuBeF,a","file":"validateEvent.js","sourcesContent":["const isArrayOf = (arr, type) => {\r\n  if (!Array.isArray(arr)) {\r\n    return false;\r\n  }\r\n  return arr.every(x => typeof x !== type); // eslint-disable-line valid-typeof\r\n};\r\n\r\nconst checkDate = val => Number.isFinite(val) && new Date(val).getTime() === val;\r\n\r\nconst fields = {\r\n  name: val => typeof val === 'string' && (val.length > 5),\r\n  allday: val => typeof val === 'boolean',\r\n  startDate: checkDate,\r\n  endDate: checkDate,\r\n  reminders: val => isArrayOf(val, 'number'),\r\n  mandatory: val => typeof val === 'boolean',\r\n  location: val => typeof val === 'string' && !val.includes('\\n'),\r\n  description: val => typeof val === 'string',\r\n  repeats: val => val == null || (val && Object.keys(val.every).length),\r\n};\r\n\r\nconst validateEvent = (event) => {\r\n  let failures = [];\r\n\r\n  Object.keys(fields).forEach((key) => {\r\n    if (!fields[key](event[key])) {\r\n      failures.push(key);\r\n    }\r\n  });\r\n  if (event.startDate > event.endDate) {\r\n    failures.push('startDate', 'endDate');\r\n  }\r\n  if (event.repeats &&\r\n    Number.isFinite(event.repeats.endDate) &&\r\n    event.repeats.endDate < event.startDate) {\r\n    failures.push('repeatEndDate');\r\n  }\r\n\r\n  // make array unique\r\n  failures = failures.filter((x, i) => failures.indexOf(x) === i);\r\n\r\n  return [!!failures.length, failures];\r\n};\r\n\r\nexport default validateEvent;\r\n"]}