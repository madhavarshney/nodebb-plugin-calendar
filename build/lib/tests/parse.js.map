{"version":3,"sources":["../../../src/lib/tests/parse.js"],"names":["data","name","allday","startDate","Date","now","endDate","reminders","location","description","mandatory","repeats","result","strictEqual","deepEqual","every","week","forEach","x"],"mappings":"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","file":"parse.js","sourcesContent":["import assert from 'assert';\r\nimport parse from '../parse';\r\nimport rawTemplate from '../../client/templates';\r\n\r\n[\r\n  () => {\r\n    // basic test\r\n    const data = {\r\n      name: 'a test name',\r\n      allday: true,\r\n      startDate: Date.now(),\r\n      endDate: Date.now() + (3 * 24 * 60 * 60 * 1000),\r\n      reminders: [50, 20, 10, 0],\r\n      location: 'here somewhere',\r\n      description: 'somewhere else',\r\n      mandatory: false,\r\n      repeats: null,\r\n    };\r\n    const result = parse(\r\n      `other things that make sense\r\n      ${rawTemplate(data)}\r\n      and some more *markdown*`\r\n    );\r\n\r\n    assert(result && typeof result === 'object', 'Expected Object, got a falsy value');\r\n    assert.strictEqual(data.name, result.name, '`name` field incorrect');\r\n    assert.strictEqual(data.allday, result.allday, '`allday` field incorrect');\r\n    assert.strictEqual(data.startDate, result.startDate, '`startDate` field incorrect');\r\n    assert.strictEqual(data.endDate, result.endDate, '`endDate` field incorrect');\r\n    assert.deepEqual(data.reminders, result.reminders, '`reminders` field incorrect');\r\n    assert.strictEqual(data.location, result.location, '`location` field incorrect');\r\n    assert.strictEqual(data.description, result.description, '`description` field incorrect');\r\n    assert.strictEqual(data.repeats, result.repeats, '`repeats` field incorrect');\r\n  },\r\n  () => {\r\n    // test allday false and repeats as full object\r\n    const data = {\r\n      name: 'a test name',\r\n      allday: false,\r\n      startDate: Date.now() - (3 * 24 * 60 * 60 * 1000),\r\n      endDate: Date.now(),\r\n      reminders: [50, 20, 10, 0],\r\n      location: 'here somewhere',\r\n      description: 'somewhere else',\r\n      mandatory: false,\r\n      repeats: {\r\n        every: {\r\n          week: true,\r\n        },\r\n        endDate: null,\r\n      },\r\n    };\r\n    const result = parse(rawTemplate(data));\r\n    assert(typeof result === 'object', 'Expected Object, got something else');\r\n    assert.strictEqual(data.name, result.name, '`name` field incorrect');\r\n    assert.strictEqual(data.allday, result.allday, '`allday` field incorrect');\r\n    assert.strictEqual(data.startDate, result.startDate, '`startDate` field incorrect');\r\n    assert.strictEqual(data.endDate, result.endDate, '`endDate` field incorrect');\r\n    assert.deepEqual(data.reminders, result.reminders, '`reminders` field incorrect');\r\n    assert.strictEqual(data.location, result.location, '`location` field incorrect');\r\n    assert.strictEqual(data.description, result.description, '`description` field incorrect');\r\n    assert.deepEqual(data.repeats, result.repeats, '`repeats` field incorrect');\r\n  },\r\n  () => {\r\n    // test bad date failing completely\r\n    const data = {\r\n      name: 'a test name',\r\n      allday: false,\r\n      startDate: Date.now() - (3 * 24 * 60 * 60 * 1000),\r\n      endDate: 'a string',\r\n      reminders: [50, 20, 10, 0],\r\n      location: 'here somewhere',\r\n      description: 'somewhere else',\r\n      mandatory: false,\r\n    };\r\n    const result = parse(rawTemplate(data));\r\n    assert.strictEqual(null, result, 'Expected null, got something else');\r\n  },\r\n  () => {\r\n    // test bad reminders failing completely\r\n    const data = {\r\n      name: 'a test name',\r\n      allday: false,\r\n      startDate: Date.now() - (3 * 24 * 60 * 60 * 1000),\r\n      endDate: Date.now(),\r\n      reminders: 'a string',\r\n      location: 'here somewhere',\r\n      description: 'somewhere else',\r\n      mandatory: false,\r\n    };\r\n    const result = parse(rawTemplate(data));\r\n    assert.strictEqual(null, result, 'Expected null, got something else');\r\n  },\r\n  () => {\r\n    // test bad location failing completely\r\n    const data = {\r\n      name: 'a test name',\r\n      allday: false,\r\n      startDate: Date.now() - (3 * 24 * 60 * 60 * 1000),\r\n      endDate: Date.now(),\r\n      reminders: [50, 20, 10, 0],\r\n      location: 'here somewhere\\nhasbbks',\r\n      description: 'somewhere else',\r\n      mandatory: false,\r\n    };\r\n    const result = parse(rawTemplate(data));\r\n    assert.strictEqual(null, result, 'Expected null, got something else');\r\n  },\r\n  () => {\r\n    // test bad name failing completely\r\n    const data = {\r\n      name: 'a test name\\ndsjvhoaho',\r\n      allday: false,\r\n      startDate: Date.now() - (3 * 24 * 60 * 60 * 1000),\r\n      endDate: Date.now(),\r\n      reminders: [50, 20, 10, 0],\r\n      location: 'here somewhere',\r\n      description: 'somewhere else',\r\n      mandatory: false,\r\n    };\r\n    const result = parse(rawTemplate(data));\r\n    assert.strictEqual(null, result, 'Expected null, got something else');\r\n  },\r\n].forEach(x => x());\r\n"]}